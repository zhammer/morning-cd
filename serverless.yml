service: morning-cd

provider:
  name: aws
  runtime: python3.6

package:
  include:
    - morning_cd/**

functions:
  spotify-access-token:
    description: Fetch spotify access token
    handler:
      morning_cd/delivery/aws_lambda/spotify_access_token.handler
    events:
      - http:
          path: /accesstoken
          method: get
          cors:
            origin: ${self:custom.config.ACCESS_CONTROL_ALLOW_ORIGIN}
    environment:
      SPOTIFY_CLIENT_ID: ${self:custom.secrets.SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${self:custom.secrets.SPOTIFY_CLIENT_SECRET}
      ACCESS_CONTROL_ALLOW_ORIGIN: ${self:custom.config.ACCESS_CONTROL_ALLOW_ORIGIN}

  graphql:
    description: Universal graphql endpoint
    handler:
      morning_cd/delivery/aws_lambda/graphql.handler
    events:
      - http:
          path: /graphql
          method: post
          cors:
            origin: ${self:custom.config.ACCESS_CONTROL_ALLOW_ORIGIN}
    environment:
      DATABASE_CONNECTION_STRING: ${self:custom.secrets.DATABASE_CONNECTION_STRING}
      SPOTIFY_CLIENT_ID: ${self:custom.secrets.SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${self:custom.secrets.SPOTIFY_CLIENT_SECRET}
      ACCESS_CONTROL_ALLOW_ORIGIN: ${self:custom.config.ACCESS_CONTROL_ALLOW_ORIGIN}
    vpc:
      securityGroupIds:
        - sg-0adf9c7c69d863eb5
      subnetIds:
        - subnet-09a25d5f1adcc44c7
        - subnet-0d40a6ff68c401dd5
        - subnet-047fe21bec462bcc5
        - subnet-038478ac6e33b3974
        - subnet-06c744148461a661c
    warmup: true


custom:
  config:
    WEBSITE_DOMAIN_NAME: morningcd.com
    ACCESS_CONTROL_ALLOW_ORIGIN: https://${self:custom.config.WEBSITE_DOMAIN_NAME}
  client:
    bucketName: ${self:custom.config.WEBSITE_DOMAIN_NAME}
    distributionFolder: web_client/build
    errorDocument: index.html
  customDomain:
    domainName: api.${self:custom.config.WEBSITE_DOMAIN_NAME}
    certificateName: "*.${self:custom.config.WEBSITE_DOMAIN_NAME}"
  secrets:
    DATABASE_CONNECTION_STRING: ${env:DATABASE_CONNECTION_STRING}
    SPOTIFY_CLIENT_ID: ${env:SPOTIFY_CLIENT_ID}
    SPOTIFY_CLIENT_SECRET: ${env:SPOTIFY_CLIENT_SECRET}
  pythonRequirements:
    dockerizePip: non-linux
  warmup:
    schedule: rate(15 minutes)
    prewarm: true
    role: morningCdWarmupRole

# this is all for warmup
resources:
  Resources:
    morningCdWarmupRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: MorningCdWarmupRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: invokeMorningCdLambdas
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
                - Effect: 'Allow'
                  Action:
                    - 'lambda:InvokeFunction'
                  Resource:
                  - Fn::Join:
                    - ':'
                    - - arn:aws:lambda
                      - Ref: AWS::Region
                      - Ref: AWS::AccountId
                      - function:${self:service}-${opt:stage, self:provider.stage}-*

plugins:
  - serverless-python-requirements
  - serverless-finch
  - serverless-domain-manager
  - serverless-plugin-warmup
